{"ast":null,"code":"var _jsxFileName = \"/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Container, Grid } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport TitleBar from './components/TitleBar';\nimport Summary from './components/Summary';\nimport TransactionsList from './components/TransactionsList';\nimport './App.css';\n\nfunction createData(name, calories, fat) {\n  return {\n    name,\n    calories,\n    fat\n  };\n}\n\nconst rows = [createData('Cupcake', 305, 3.7), createData('Donut', 452, 25.0), createData('Eclair', 262, 16.0), createData('Frozen yoghurt', 159, 6.0), createData('Gingerbread', 356, 16.0), createData('Honeycomb', 408, 3.2), createData('Ice cream sandwich', 237, 9.0), createData('Jelly Bean', 375, 0.0), createData('KitKat', 518, 26.0), createData('Lollipop', 392, 0.2), createData('Marshmallow', 318, 0), createData('Nougat', 360, 19.0), createData('Oreo', 437, 18.0)].sort((a, b) => a.calories < b.calories ? -1 : 1);\n\nfunction App() {\n  const getPlaidAccounts = () => {\n    const storedAccounts = window.localStorage.getItem(\"plaid_items\");\n\n    if (storedAccounts) {\n      return Array.from(storedAccounts);\n    } else {\n      window.localStorage.setItem(\"plaid_items\", new Set());\n      return [];\n    }\n  };\n\n  const [accounts, setAccounts] = React.useState(getPlaidAccounts);\n  /*global Plaid*/\n\n  /*global $*/\n\n  var plaidLinkHandler = Plaid.create({\n    clientName: 'Omniscient',\n    countryCodes: ['US'],\n    env: 'sandbox',\n    key: '4fcccae7bfd43b8b5b607099f46e79',\n    product: ['transactions'],\n    language: 'en',\n    onSuccess: function (public_token, metadata) {\n      const plaid_items = window.localStorage.getItem(\"plaid_items\");\n      plaid_items.add(public_token);\n      setAccounts(plaid_items);\n    }\n  });\n  const Data = accounts ? () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: \"container\",\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Skeleton, {\n      variant: \"rect\",\n      width: 400,\n      height: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 54\n      }\n    })), /*#__PURE__*/React.createElement(TransactionsList, {\n      transactions: rows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  } : () => null;\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TitleBar, {\n    accounts: accounts,\n    plaidHandler: plaidLinkHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Summary, {\n    accounts: accounts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Data, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/App.js"],"names":["React","ReactDOM","Container","Grid","Skeleton","TitleBar","Summary","TransactionsList","createData","name","calories","fat","rows","sort","a","b","App","getPlaidAccounts","storedAccounts","window","localStorage","getItem","Array","from","setItem","Set","accounts","setAccounts","useState","plaidLinkHandler","Plaid","create","clientName","countryCodes","env","key","product","language","onSuccess","public_token","metadata","plaid_items","add","Data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Container, Grid} from '@material-ui/core';\nimport {Skeleton} from '@material-ui/lab'\nimport TitleBar from './components/TitleBar'\nimport Summary from './components/Summary'\nimport TransactionsList from './components/TransactionsList'\n\nimport './App.css';\n\nfunction createData(name, calories, fat) {\n  return {name, calories, fat};\n}\n\nconst rows = [\n  createData('Cupcake', 305, 3.7),\n  createData('Donut', 452, 25.0),\n  createData('Eclair', 262, 16.0),\n  createData('Frozen yoghurt', 159, 6.0),\n  createData('Gingerbread', 356, 16.0),\n  createData('Honeycomb', 408, 3.2),\n  createData('Ice cream sandwich', 237, 9.0),\n  createData('Jelly Bean', 375, 0.0),\n  createData('KitKat', 518, 26.0),\n  createData('Lollipop', 392, 0.2),\n  createData('Marshmallow', 318, 0),\n  createData('Nougat', 360, 19.0),\n  createData('Oreo', 437, 18.0)\n].sort((a, b) => (\n  a.calories < b.calories\n  ? -1\n  : 1));\n\nfunction App() {\n  const getPlaidAccounts = () => {\n    const storedAccounts = window.localStorage.getItem(\"plaid_items\");\n    if (storedAccounts) {\n      return Array.from(storedAccounts);\n    } else {\n      window.localStorage.setItem(\"plaid_items\", new Set());\n      return [];\n    }\n  }\n\n  const [accounts, setAccounts] = React.useState(getPlaidAccounts);\n\n  /*global Plaid*/\n  /*global $*/\n  var plaidLinkHandler = Plaid.create({\n    clientName: 'Omniscient',\n    countryCodes: ['US'],\n    env: 'sandbox',\n    key: '4fcccae7bfd43b8b5b607099f46e79',\n    product: ['transactions'],\n    language: 'en',\n    onSuccess: function(public_token, metadata) {\n      const plaid_items = window.localStorage.getItem(\"plaid_items\");\n      plaid_items.add(public_token);\n      setAccounts(plaid_items);\n    }\n  });\n\n  const Data = accounts\n    ? (() => {\n      return (<React.Fragment>\n        <Grid container=\"container\" justify=\"center\"><Skeleton variant=\"rect\" width={400} height={200}/></Grid>\n        <TransactionsList transactions={rows}/>\n      </React.Fragment>)\n    })\n    : () => null;\n\n  return (<Container maxWidth=\"sm\">\n    <TitleBar accounts={accounts} plaidHandler={plaidLinkHandler} />\n    <Summary accounts={accounts}/>\n    <Data/>\n  </Container>);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}