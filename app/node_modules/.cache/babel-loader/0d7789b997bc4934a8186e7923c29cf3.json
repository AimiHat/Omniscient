{"ast":null,"code":"var _jsxFileName = \"/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Container, Typography, Button, Grid, Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport TitleBar from './components/TitleBar';\nimport Summary from './components/Summary';\nimport DailyView from './components/DailyView';\nimport TransactionsList from './components/TransactionsList';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport config from './config';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const getPlaidAccounts = () => {\n    const storedAccounts = window.localStorage.getItem(\"plaid_items\");\n\n    if (storedAccounts) {\n      return JSON.parse(storedAccounts);\n    } else {\n      window.localStorage.setItem(\"plaid_items\", JSON.stringify([]));\n      return [];\n    }\n  };\n\n  const [accounts, setAccounts] = React.useState(getPlaidAccounts);\n  const [transactions, setTransactions] = React.useState(null);\n  React.useEffect(() => {\n    if (accounts.length === 0) {\n      return;\n    }\n\n    window.fetch(\"http://lvh.me:7000/transactions\", {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json;charset=UTF-8'\n      },\n      body: JSON.stringify({\n        access_token: accounts[0][1]\n      })\n    }).then(r => r.json()).then(response => {\n      setTransactions(response.map(t => {\n        return {\n          amount: t.amount,\n          store: t.name,\n          date: t.date,\n          category: t.category[1]\n        };\n      }));\n    });\n  }, [accounts]);\n  /*global Plaid*/\n\n  /*global $*/\n\n  var plaidLinkHandler = Plaid.create({\n    clientName: 'Omniscient',\n    countryCodes: ['US'],\n    env: 'sandbox',\n    key: '4fcccae7bfd43b8b5b607099f46e79',\n    product: ['transactions', 'auth'],\n    accountSubtypes: {\n      depository: ['checking', 'savings']\n    },\n    language: 'en',\n    onSuccess: function (public_token, metadata) {\n      console.log(public_token);\n      window.fetch(\"http://lvh.me:7000/get_access_token\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          public_token: public_token\n        })\n      }).then(r => r.json()).then(r => {\n        const plaid_items = JSON.parse(window.localStorage.getItem(\"plaid_items\"));\n\n        if (plaid_items.indexOf(public_token) === -1) {\n          plaid_items.push([r.item_id, r.access_token]);\n        }\n\n        window.localStorage.setItem(\"plaid_items\", JSON.stringify(plaid_items));\n        setAccounts(plaid_items);\n      });\n    }\n  });\n  const Data = accounts.length > 0 && transactions ? () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DailyView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TransactionsList, {\n      transactions: transactions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }));\n  } : () => null;\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    startIcon: /*#__PURE__*/React.createElement(LockIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 24\n      }\n    }),\n    onClick: () => {\n      window.localStorage.setItem(\"plaid_items\", JSON.stringify([]));\n      setAccounts([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, \"Disconnect\"), /*#__PURE__*/React.createElement(TitleBar, {\n    accounts: accounts,\n    plaidHandler: plaidLinkHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Summary, {\n    accounts: accounts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Data, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/App.js"],"names":["React","ReactDOM","Container","Typography","Button","Grid","Box","Skeleton","TitleBar","Summary","DailyView","TransactionsList","LockIcon","Fab","makeStyles","config","useStyles","theme","root","display","flexDirection","justifyContent","App","classes","getPlaidAccounts","storedAccounts","window","localStorage","getItem","JSON","parse","setItem","stringify","accounts","setAccounts","useState","transactions","setTransactions","useEffect","length","fetch","method","headers","body","access_token","then","r","json","response","map","t","amount","store","name","date","category","plaidLinkHandler","Plaid","create","clientName","countryCodes","env","key","product","accountSubtypes","depository","language","onSuccess","public_token","metadata","console","log","plaid_items","indexOf","push","item_id","Data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Container, Typography, Button, Grid, Box} from '@material-ui/core';\nimport {Skeleton} from '@material-ui/lab'\nimport TitleBar from './components/TitleBar'\nimport Summary from './components/Summary'\nimport DailyView from './components/DailyView'\n\nimport TransactionsList from './components/TransactionsList'\nimport LockIcon from '@material-ui/icons/Lock';\nimport Fab from '@material-ui/core/Fab';\nimport {makeStyles} from '@material-ui/core/styles';\nimport config from './config';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const getPlaidAccounts = () => {\n    const storedAccounts = window.localStorage.getItem(\"plaid_items\");\n    if (storedAccounts) {\n      return JSON.parse(storedAccounts);\n    } else {\n      window.localStorage.setItem(\"plaid_items\", JSON.stringify([]));\n      return [];\n    }\n  }\n\n  const [accounts, setAccounts] = React.useState(getPlaidAccounts);\n  const [transactions, setTransactions] = React.useState(null);\n\n  React.useEffect(()=> {\n    if (accounts.length === 0) {\n      return\n    }\n    window.fetch(\"http://lvh.me:7000/transactions\", {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json;charset=UTF-8'\n      },\n      body: JSON.stringify({access_token: accounts[0][1]})\n    }).then(r => r.json()).then(response => {\n      setTransactions(response.map(t => {return {\n        amount : t.amount,\n        store: t.name,\n        date: t.date,\n        category: t.category[1]\n      }}))\n    })\n  }, [accounts])\n\n  /*global Plaid*/\n  /*global $*/\n  var plaidLinkHandler = Plaid.create({\n    clientName: 'Omniscient',\n    countryCodes: ['US'],\n    env: 'sandbox',\n    key: '4fcccae7bfd43b8b5b607099f46e79',\n    product: [\n      'transactions', 'auth'\n    ],\n    accountSubtypes: {\n      depository: ['checking', 'savings']\n    },\n    language: 'en',\n    onSuccess: function(public_token, metadata) {\n      console.log(public_token);\n      window.fetch(\"http://lvh.me:7000/get_access_token\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({public_token: public_token})\n      }).then(r => r.json()).then(r => {\n        const plaid_items = JSON.parse(window.localStorage.getItem(\"plaid_items\"));\n        if (plaid_items.indexOf(public_token) === -1) {\n          plaid_items.push([r.item_id, r.access_token]);\n        }\n        window.localStorage.setItem(\"plaid_items\", JSON.stringify(plaid_items))\n        setAccounts(plaid_items);\n      })\n    }\n  });\n\n  const Data = (accounts.length > 0) && (transactions)\n    ? (() => {\n      return (<React.Fragment>\n        <DailyView />\n        <TransactionsList transactions={transactions}/>\n      </React.Fragment>)\n    })\n    : () => null;\n\n  return (<Container maxWidth=\"sm\">\n    <Button startIcon={<LockIcon />} onClick={() => {\n        window.localStorage.setItem(\"plaid_items\", JSON.stringify([]));\n        setAccounts([]);\n      }}>\n      Disconnect\n    </Button>\n    <TitleBar accounts={accounts} plaidHandler={plaidLinkHandler}/>\n    <Summary accounts={accounts}/>\n    <Data/>\n  </Container>);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}