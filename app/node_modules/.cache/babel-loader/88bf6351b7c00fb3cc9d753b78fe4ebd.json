{"ast":null,"code":"import _slicedToArray from\"/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import ReactDOM from'react-dom';import{Container,Typography,Button,Grid,Box}from'@material-ui/core';import{Skeleton}from'@material-ui/lab';import TitleBar from'./components/TitleBar';import Summary from'./components/Summary';import DailyView from'./components/DailyView';import TransactionsList from'./components/TransactionsList';import LockIcon from'@material-ui/icons/Lock';import Fab from'@material-ui/core/Fab';import{makeStyles}from'@material-ui/core/styles';import config from'./config';var useStyles=makeStyles(function(theme){return{root:{display:\"flex\",flexDirection:\"row\",justifyContent:\"center\"}};});function App(){var classes=useStyles();var getPlaidAccounts=function getPlaidAccounts(){var storedAccounts=window.localStorage.getItem(\"plaid_items\");if(storedAccounts){return JSON.parse(storedAccounts);}else{window.localStorage.setItem(\"plaid_items\",JSON.stringify([]));return[];}};var _React$useState=React.useState(getPlaidAccounts),_React$useState2=_slicedToArray(_React$useState,2),accounts=_React$useState2[0],setAccounts=_React$useState2[1];var _React$useState3=React.useState(null),_React$useState4=_slicedToArray(_React$useState3,2),transactions=_React$useState4[0],setTransactions=_React$useState4[1];React.useEffect(function(){if(accounts.length===0){return;}window.fetch(\"http://lvh.me:7000/transactions\",{method:'POST',headers:{'content-type':'application/json;charset=UTF-8'},body:JSON.stringify({access_token:accounts[0][1]})}).then(function(r){return r.json();}).then(function(response){setTransactions(response.map(function(t){return{amount:t.amount,store:t.name,date:t.date,category:t.category[1]};}));});},[accounts]);/*global Plaid*/ /*global $*/var plaidLinkHandler=Plaid.create({clientName:'Omniscient',countryCodes:['US'],env:'sandbox',key:'4fcccae7bfd43b8b5b607099f46e79',product:['transactions','auth'],accountSubtypes:{depository:['checking','savings']},language:'en',onSuccess:function onSuccess(public_token,metadata){console.log(public_token);window.fetch(\"http://lvh.me:7000/get_access_token\",{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({public_token:public_token})}).then(function(r){return r.json();}).then(function(r){var plaid_items=JSON.parse(window.localStorage.getItem(\"plaid_items\"));if(plaid_items.indexOf(public_token)===-1){plaid_items.push([r.item_id,r.access_token]);}window.localStorage.setItem(\"plaid_items\",JSON.stringify(plaid_items));setAccounts(plaid_items);});}});var Data=accounts.length>0&&transactions?function(){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(DailyView,{transactions:transactions}),/*#__PURE__*/React.createElement(TransactionsList,{transactions:transactions}));}:function(){return null;};return/*#__PURE__*/React.createElement(Container,{maxWidth:\"sm\"},/*#__PURE__*/React.createElement(Button,{startIcon:/*#__PURE__*/React.createElement(LockIcon,null),onClick:function onClick(){window.localStorage.setItem(\"plaid_items\",JSON.stringify([]));setAccounts([]);}},\"Disconnect\"),/*#__PURE__*/React.createElement(TitleBar,{accounts:accounts,plaidHandler:plaidLinkHandler}),/*#__PURE__*/React.createElement(Summary,{accounts:accounts}),/*#__PURE__*/React.createElement(Data,null));}export default App;","map":{"version":3,"sources":["/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/App.js"],"names":["React","ReactDOM","Container","Typography","Button","Grid","Box","Skeleton","TitleBar","Summary","DailyView","TransactionsList","LockIcon","Fab","makeStyles","config","useStyles","theme","root","display","flexDirection","justifyContent","App","classes","getPlaidAccounts","storedAccounts","window","localStorage","getItem","JSON","parse","setItem","stringify","useState","accounts","setAccounts","transactions","setTransactions","useEffect","length","fetch","method","headers","body","access_token","then","r","json","response","map","t","amount","store","name","date","category","plaidLinkHandler","Plaid","create","clientName","countryCodes","env","key","product","accountSubtypes","depository","language","onSuccess","public_token","metadata","console","log","plaid_items","indexOf","push","item_id","Data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Container, Typography, Button, Grid, Box} from '@material-ui/core';\nimport {Skeleton} from '@material-ui/lab'\nimport TitleBar from './components/TitleBar'\nimport Summary from './components/Summary'\nimport DailyView from './components/DailyView'\n\nimport TransactionsList from './components/TransactionsList'\nimport LockIcon from '@material-ui/icons/Lock';\nimport Fab from '@material-ui/core/Fab';\nimport {makeStyles} from '@material-ui/core/styles';\nimport config from './config';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const getPlaidAccounts = () => {\n    const storedAccounts = window.localStorage.getItem(\"plaid_items\");\n    if (storedAccounts) {\n      return JSON.parse(storedAccounts);\n    } else {\n      window.localStorage.setItem(\"plaid_items\", JSON.stringify([]));\n      return [];\n    }\n  }\n\n  const [accounts, setAccounts] = React.useState(getPlaidAccounts);\n  const [transactions, setTransactions] = React.useState(null);\n\n  React.useEffect(()=> {\n    if (accounts.length === 0) {\n      return\n    }\n    window.fetch(\"http://lvh.me:7000/transactions\", {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json;charset=UTF-8'\n      },\n      body: JSON.stringify({access_token: accounts[0][1]})\n    }).then(r => r.json()).then(response => {\n      setTransactions(response.map(t => {return {\n        amount : t.amount,\n        store: t.name,\n        date: t.date,\n        category: t.category[1]\n      }}))\n    })\n  }, [accounts])\n\n  /*global Plaid*/\n  /*global $*/\n  var plaidLinkHandler = Plaid.create({\n    clientName: 'Omniscient',\n    countryCodes: ['US'],\n    env: 'sandbox',\n    key: '4fcccae7bfd43b8b5b607099f46e79',\n    product: [\n      'transactions', 'auth'\n    ],\n    accountSubtypes: {\n      depository: ['checking', 'savings']\n    },\n    language: 'en',\n    onSuccess: function(public_token, metadata) {\n      console.log(public_token);\n      window.fetch(\"http://lvh.me:7000/get_access_token\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({public_token: public_token})\n      }).then(r => r.json()).then(r => {\n        const plaid_items = JSON.parse(window.localStorage.getItem(\"plaid_items\"));\n        if (plaid_items.indexOf(public_token) === -1) {\n          plaid_items.push([r.item_id, r.access_token]);\n        }\n        window.localStorage.setItem(\"plaid_items\", JSON.stringify(plaid_items))\n        setAccounts(plaid_items);\n      })\n    }\n  });\n\n  const Data = (accounts.length > 0) && (transactions)\n    ? (() => {\n      return (<React.Fragment>\n        <DailyView transactions={transactions} />\n        <TransactionsList transactions={transactions}/>\n      </React.Fragment>)\n    })\n    : () => null;\n\n  return (<Container maxWidth=\"sm\">\n    <Button startIcon={<LockIcon />} onClick={() => {\n        window.localStorage.setItem(\"plaid_items\", JSON.stringify([]));\n        setAccounts([]);\n      }}>\n      Disconnect\n    </Button>\n    <TitleBar accounts={accounts} plaidHandler={plaidLinkHandler}/>\n    <Summary accounts={accounts}/>\n    <Data/>\n  </Container>);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}