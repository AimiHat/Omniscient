{"ast":null,"code":"var _jsxFileName = \"/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/components/DailyView.js\";\nimport React from 'react';\nimport { Typography, Grid, Box, Paper } from '@material-ui/core';\nimport { ResponsiveLine } from '@nivo/line';\n\nfunction sumByDate(list) {\n  const map = new Map();\n  list.forEach(item => {\n    const key = item.date;\n    const collection = map.get(key);\n    map.set(key, item.amount + (collection ? collection : 0));\n  });\n  return map;\n} // make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\n\n\nconst MyResponsiveBar = ({\n  chartData\n  /* see data tab */\n\n}) => /*#__PURE__*/React.createElement(Box, {\n  height: \"300px\",\n  width: \"100%\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(ResponsiveLine, {\n  data: [{\n    id: 'fake corp. A',\n    data: chartData\n  }],\n  enableArea: true,\n  pointSize: 5,\n  enableCrosshair: false,\n  margin: {\n    bottom: 100\n  },\n  padding: 2,\n  enableGridX: false,\n  enableGridY: false,\n  xScale: {\n    type: 'time',\n    format: '%Y-%m-%d',\n    precision: 'day'\n  },\n  xFormat: \"time:%Y-%m-%d\",\n  axisBottom: {\n    format: '%b %d',\n    tickValues: 'every 2 days',\n    tickRotation: 60\n  },\n  enablePointLabel: true,\n  pointSize: 16,\n  pointBorderWidth: 1,\n  pointBorderColor: {\n    from: 'color',\n    modifiers: [['darker', 0.3]]\n  },\n  useMesh: true,\n  enableSlices: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }\n}));\n\nexport default class DailyView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: Array.from(sumByDate(props.transactions)).map(day => {\n        return {\n          x: day[0],\n          y: day[1]\n        };\n      }).reverse()\n    };\n  }\n\n  render() {\n    const {\n      data: chartData\n    } = this.state;\n\n    if (!chartData) {\n      return null;\n    }\n\n    console.log(chartData);\n    return /*#__PURE__*/React.createElement(MyResponsiveBar, {\n      chartData: chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/aimihat/Desktop/Side Projects/Omniscient/front-end/src/components/DailyView.js"],"names":["React","Typography","Grid","Box","Paper","ResponsiveLine","sumByDate","list","map","Map","forEach","item","key","date","collection","get","set","amount","MyResponsiveBar","chartData","id","data","bottom","type","format","precision","tickValues","tickRotation","from","modifiers","DailyView","PureComponent","constructor","props","state","Array","transactions","day","x","y","reverse","render","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Typography, Grid, Box, Paper} from '@material-ui/core';\nimport { ResponsiveLine } from '@nivo/line'\n\nfunction sumByDate(list) {\n  const map = new Map();\n  list.forEach((item) => {\n    const key = item.date;\n    const collection = map.get(key);\n    map.set(key, item.amount + (\n      collection\n      ? collection\n      : 0));\n  });\n  return map;\n}\n\n\n\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\nconst MyResponsiveBar = ({ chartData /* see data tab */ }) => (\n  <Box height=\"300px\" width=\"100%\">\n    <ResponsiveLine\n      data={[\n          {\n              id: 'fake corp. A',\n              data: (chartData)\n          },\n      ]}\n      enableArea={true}\n      pointSize={5}\n      enableCrosshair={false}\n      margin={{ bottom: 100 }}\n      padding={2}\n      enableGridX={false}\n      enableGridY={false}\n      xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          precision: 'day',\n      }}\n      xFormat=\"time:%Y-%m-%d\"\n      axisBottom={{\n          format: '%b %d',\n          tickValues: 'every 2 days',\n          tickRotation: 60,\n      }}\n      enablePointLabel={true}\n      pointSize={16}\n      pointBorderWidth={1}\n      pointBorderColor={{\n          from: 'color',\n          modifiers: [['darker', 0.3]],\n      }}\n      useMesh={true}\n      enableSlices={false}\n    />\n  </Box>\n)\n\nexport default class DailyView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: Array.from(sumByDate(props.transactions)).map(day => {return ({x: day[0], y: day[1]})}).reverse()\n    };\n  }\n\n  render() {\n    const {data: chartData} = this.state;\n\n    if (!chartData) {\n      return null;\n    }\n\n    console.log(chartData);\n\n    return (<MyResponsiveBar chartData={chartData} />);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}